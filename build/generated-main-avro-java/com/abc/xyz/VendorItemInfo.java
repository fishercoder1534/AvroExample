/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.abc.xyz;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VendorItemInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2560350272290496914L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VendorItemInfo\",\"namespace\":\"com.abc.xyz\",\"fields\":[{\"name\":\"vendorItemId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"long\"},{\"name\":\"deliveryChargeType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String vendorItemId;
  @Deprecated public long price;
  @Deprecated public java.lang.String deliveryChargeType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VendorItemInfo() {}

  /**
   * All-args constructor.
   * @param vendorItemId The new value for vendorItemId
   * @param price The new value for price
   * @param deliveryChargeType The new value for deliveryChargeType
   */
  public VendorItemInfo(java.lang.String vendorItemId, java.lang.Long price, java.lang.String deliveryChargeType) {
    this.vendorItemId = vendorItemId;
    this.price = price;
    this.deliveryChargeType = deliveryChargeType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vendorItemId;
    case 1: return price;
    case 2: return deliveryChargeType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vendorItemId = (java.lang.String)value$; break;
    case 1: price = (java.lang.Long)value$; break;
    case 2: deliveryChargeType = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vendorItemId' field.
   * @return The value of the 'vendorItemId' field.
   */
  public java.lang.String getVendorItemId() {
    return vendorItemId;
  }

  /**
   * Sets the value of the 'vendorItemId' field.
   * @param value the value to set.
   */
  public void setVendorItemId(java.lang.String value) {
    this.vendorItemId = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Long getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Long value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'deliveryChargeType' field.
   * @return The value of the 'deliveryChargeType' field.
   */
  public java.lang.String getDeliveryChargeType() {
    return deliveryChargeType;
  }

  /**
   * Sets the value of the 'deliveryChargeType' field.
   * @param value the value to set.
   */
  public void setDeliveryChargeType(java.lang.String value) {
    this.deliveryChargeType = value;
  }

  /**
   * Creates a new VendorItemInfo RecordBuilder.
   * @return A new VendorItemInfo RecordBuilder
   */
  public static com.abc.xyz.VendorItemInfo.Builder newBuilder() {
    return new com.abc.xyz.VendorItemInfo.Builder();
  }

  /**
   * Creates a new VendorItemInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VendorItemInfo RecordBuilder
   */
  public static com.abc.xyz.VendorItemInfo.Builder newBuilder(com.abc.xyz.VendorItemInfo.Builder other) {
    return new com.abc.xyz.VendorItemInfo.Builder(other);
  }

  /**
   * Creates a new VendorItemInfo RecordBuilder by copying an existing VendorItemInfo instance.
   * @param other The existing instance to copy.
   * @return A new VendorItemInfo RecordBuilder
   */
  public static com.abc.xyz.VendorItemInfo.Builder newBuilder(com.abc.xyz.VendorItemInfo other) {
    return new com.abc.xyz.VendorItemInfo.Builder(other);
  }

  /**
   * RecordBuilder for VendorItemInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VendorItemInfo>
    implements org.apache.avro.data.RecordBuilder<VendorItemInfo> {

    private java.lang.String vendorItemId;
    private long price;
    private java.lang.String deliveryChargeType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.abc.xyz.VendorItemInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vendorItemId)) {
        this.vendorItemId = data().deepCopy(fields()[0].schema(), other.vendorItemId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deliveryChargeType)) {
        this.deliveryChargeType = data().deepCopy(fields()[2].schema(), other.deliveryChargeType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VendorItemInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.abc.xyz.VendorItemInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.vendorItemId)) {
        this.vendorItemId = data().deepCopy(fields()[0].schema(), other.vendorItemId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deliveryChargeType)) {
        this.deliveryChargeType = data().deepCopy(fields()[2].schema(), other.deliveryChargeType);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'vendorItemId' field.
      * @return The value.
      */
    public java.lang.String getVendorItemId() {
      return vendorItemId;
    }

    /**
      * Sets the value of the 'vendorItemId' field.
      * @param value The value of 'vendorItemId'.
      * @return This builder.
      */
    public com.abc.xyz.VendorItemInfo.Builder setVendorItemId(java.lang.String value) {
      validate(fields()[0], value);
      this.vendorItemId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vendorItemId' field has been set.
      * @return True if the 'vendorItemId' field has been set, false otherwise.
      */
    public boolean hasVendorItemId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vendorItemId' field.
      * @return This builder.
      */
    public com.abc.xyz.VendorItemInfo.Builder clearVendorItemId() {
      vendorItemId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Long getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.abc.xyz.VendorItemInfo.Builder setPrice(long value) {
      validate(fields()[1], value);
      this.price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.abc.xyz.VendorItemInfo.Builder clearPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'deliveryChargeType' field.
      * @return The value.
      */
    public java.lang.String getDeliveryChargeType() {
      return deliveryChargeType;
    }

    /**
      * Sets the value of the 'deliveryChargeType' field.
      * @param value The value of 'deliveryChargeType'.
      * @return This builder.
      */
    public com.abc.xyz.VendorItemInfo.Builder setDeliveryChargeType(java.lang.String value) {
      validate(fields()[2], value);
      this.deliveryChargeType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'deliveryChargeType' field has been set.
      * @return True if the 'deliveryChargeType' field has been set, false otherwise.
      */
    public boolean hasDeliveryChargeType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'deliveryChargeType' field.
      * @return This builder.
      */
    public com.abc.xyz.VendorItemInfo.Builder clearDeliveryChargeType() {
      deliveryChargeType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public VendorItemInfo build() {
      try {
        VendorItemInfo record = new VendorItemInfo();
        record.vendorItemId = fieldSetFlags()[0] ? this.vendorItemId : (java.lang.String) defaultValue(fields()[0]);
        record.price = fieldSetFlags()[1] ? this.price : (java.lang.Long) defaultValue(fields()[1]);
        record.deliveryChargeType = fieldSetFlags()[2] ? this.deliveryChargeType : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
